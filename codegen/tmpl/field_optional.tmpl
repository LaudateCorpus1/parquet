type {{.StructType}} struct {
	parquet.OptionalField
	vals  []{{.ParquetType}}
	read  func(r *{{.OwnerType}}) ([]{{.ParquetType}}, []uint8, []uint8)
	write func({{.OwnerAlias}} *{{.OwnerType}}, vals []{{.ParquetType}}, def, rep []uint8) (int, int)
	stats *{{.ParquetType}}optionalStats
}

func New{{.StructType}}(read func(r *{{.OwnerType}}) ([]{{.ParquetType}}, []uint8, []uint8), write func({{.OwnerAlias}} *{{.OwnerType}}, vals []{{.ParquetType}}, defs, reps []uint8) (int, int), path []string, types []int, opts ...func(*parquet.OptionalField)) *{{.StructType}} {
	return &{{.StructType}}{
		read:          read,
		write:         write,
		OptionalField: parquet.NewOptionalField(path, types, opts...),
		stats:         new{{.ParquetType}}optionalStats(maxDef(types)),
	}
}

func (f *{{.StructType}}) Schema() parquet.Field {
	return parquet.Field{Name: f.Name(), Path: f.Path(), Type: parquet.{{.ParquetTypeTitle}}Type, RepetitionType: f.RepetitionType, Types: f.Types, ConvertedType: f.ConvertedType(), LogicalType: f.LogicalType()}
}

func (f *{{.StructType}}) Write(w io.Writer, meta *parquet.Metadata) error {
	var buf bytes.Buffer
	for _, v := range f.vals {
		if err := binary.Write(&buf, binary.LittleEndian, v); err != nil {
			return err
		}
	}
	return f.DoWrite(w, meta, buf.Bytes(), len(f.Defs), f.stats)
}

func (f *{{.StructType}}) Read(r io.ReadSeeker, pg parquet.Page) error {
	rr, _, err := f.DoRead(r, pg)
	if err != nil {
		return err
	}

	v := make([]{{.ParquetType}}, f.Values()-len(f.vals))
	err = binary.Read(rr, binary.LittleEndian, &v)
	f.vals = append(f.vals, v...)
	return err
}

func (f *{{.StructType}}) Add({{.OwnerAlias}} *{{.OwnerType}}) {
	vals, defs, reps := f.read({{.OwnerAlias}})
	f.stats.add(vals, defs)
	f.vals = append(f.vals, vals...)
	f.Defs = append(f.Defs, defs...)
	f.Reps = append(f.Reps, reps...)
}

func (f *{{.StructType}}) Scan({{.OwnerAlias}} *{{.OwnerType}}) {
	if len(f.Defs) == 0 {
		return
	}

	v, l := f.write({{.OwnerAlias}}, f.vals, f.Defs, f.Reps)
	f.vals = f.vals[v:]
	f.Defs = f.Defs[l:]
	if len(f.Reps) > 0 {
		f.Reps = f.Reps[l:]
	}
}

func (f *{{.StructType}}) Levels() ([]uint8, []uint8) {
	return f.Defs, f.Reps
}