// Package parquet is not intended to be used as a general library.  The
// code generated by the 'parquetgen' command is what actually uses it for
// reading and writing parquet files.
package parquet

import (
	sch "github.com/viant/parquet/schema"
)


// FieldFunc is used to set some of the metadata for each column
type FieldFunc func(*sch.SchemaElement)

// RepetitionRequired sets the repetition type to required
func RepetitionRequired(se *sch.SchemaElement) {
	t := sch.FieldRepetitionType_REQUIRED
	se.RepetitionType = &t
}

// RepetitionOptional sets the repetition type to optional
func RepetitionOptional(se *sch.SchemaElement) {
	t := sch.FieldRepetitionType_OPTIONAL
	se.RepetitionType = &t
}

// RepetitionRepeated sets the repetition type to repeated
func RepetitionRepeated(se *sch.SchemaElement) {
	t := sch.FieldRepetitionType_REPEATED
	se.RepetitionType = &t
}


func Int32Type(se *sch.SchemaElement) {
	t := sch.Type_INT32
	se.Type = &t
}

func Uint32Type(se *sch.SchemaElement) {
	t := sch.Type_INT32
	se.Type = &t
	ct := sch.ConvertedType_UINT_32
	se.ConvertedType = &ct
}

func Int64Type(se *sch.SchemaElement) {
	t := sch.Type_INT64
	se.Type = &t
}

func Uint64Type(se *sch.SchemaElement) {
	t := sch.Type_INT64
	se.Type = &t
	ct := sch.ConvertedType_UINT_64
	se.ConvertedType = &ct
}

func Float32Type(se *sch.SchemaElement) {
	t := sch.Type_FLOAT
	se.Type = &t
}

func Float64Type(se *sch.SchemaElement) {
	t := sch.Type_DOUBLE
	se.Type = &t
}

func BoolType(se *sch.SchemaElement) {
	t := sch.Type_BOOLEAN
	se.Type = &t
}

func StringType(se *sch.SchemaElement) {
	t := sch.Type_BYTE_ARRAY
	se.Type = &t
}
